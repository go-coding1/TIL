## 운영체제의 특징

 운영체제는 사용자로 하여금 컴퓨터의 하드웨어를 보다 쉽게 사요할 수 있도록 인터페이스를 제공해주는 소프트웨어이다. 하드웨어는 컴퓨터의 장치를 제어하고 데이터를 처리하는 **중앙 처리 장치**, 데이터를 저장하는 **기억 장치**, 외부와의 통신을 담당하는 **통신 장치** 그리고 데이터 입력과 출력을 담당하는 입출력 장치 등으로 구분될 수 있다. 즉, 운영체제는 사용자 편의성을 위한 인터페이스인 동시에 다양한 자원을 관리하는 자원 관리자이다. 

![ncs5](https://user-images.githubusercontent.com/54675591/117758892-cb73d200-b25d-11eb-9c8c-3f6c74d2071e.PNG)

* 윈도즈 계열 운영체제의 특징

  마이크로소프트사에서 1995년에 Windows95를 발표한 이후 98, ME, XP, 7, 8, 10 등의 버전으로 지속 출시되고 있다. 사용자가 컨트롤하는 마우스의 아이콘을 이용하여 소프트웨어를 실행시키는 편리한 이넡페이스를 지원하는 것이 특징이다. 마이크로소프트사만이 수정 및 배포할 수 있으며 고객 지원이 체계적이라는 장점을 가지고 있지만, 문제점이 발견되었을 시 수정에 시간이 걸린다는 단점이 있고, 이런 시간적이 차이를 이용하는 악성 해커들로 인하여 유닉스 계열의 운영체제에 비하여 보안에 취약하다는 문제점이 지속적으로 제기되고 있다.

* 리눅스/유닉스 계열 운영체제의 특징

  유닉스는 1960년대 Bell연구소, MIT 그리고 General Electric이 공동 연구로 개발에 착수하여 개발한 운영체제이다. 멀티태스크 기능에 초점을 맞추었으며 초기 운영체제를 만들었다. 리눅스는 유닉스의 호환 커널이다. 리눅스는 수천 명 이상의 개발자들이 코드를 보고 update를 하고 있다. 따라서 버그 발생 시 다수의 개발자가 수정에 참여하여 빠른 업데이트가 가능하지만, 전문가용으로 많이 사용되고 있다.



### 운영체제 기본 명령어 활동

 운영체제를 제어하기 위한 방법은 CLI와 GUI가 있다. CLI는 사용자가 직접 명령어를 입력하여 컴퓨터에게 명령을 내리는 방식이며, GUI는 마우스로 화면을 클릭하여 컴퓨터를 제어하는 방식이다. 초기 Windows는 운영체제를 CLI로 설치해야 했으나, 마우스 기반의 제어 시스템인 GUI가 개발되며 설치 또한 화면 위주로 하게 되어 사용 빈도가 줄었다. 그러나 오픈소스 기반의 개발환경이 급격히 늘어나며 GitHub 등의 사용이 중요해지게 되었다. CLI는 Git과 GitHub를 통한 소스 관리에 유용하므로 기본 개념과 명령어들을 숙지해야 한다.

1. CLI 기본 명령어

   리눅스는 최상위 유저를 CLI 환경에서 #으로 표시하며 일반 유저를 $로 표시한다. 명령어에 대한 도움말은 -help, -h, #man을 명령어 뒤에 붙임으로써 확인할 수 있다. 모든 명령어에는 다른 옵션값들이 존재한다. 예를 들어 #mkdir는 디렉터리를 생성하는 명령어이며,  -p옵션을 사용하면 하위 디렉터리까지 한 번에 생성할 수 있다. #cp는 파일 복사 명령어, i는 덮어 쓰기, -r는 하위 디렉터리 및 파일 모두 복사, -v는 명령엇 리행 과정을 보여주는 옵션값이다.

    명령어는 파일 디렉터리 관리, 유저 관리, 권한 관리, 프로세스 관리, 통신 관련 등으로 구분될 수 있다. 최상위 디렉터리는 /이며 root는 최상위 디렉터리 아래의 root 계정의 홈디렉터리임을 의미한다. 타 운영체제에서 root를 최상위 디렉터리라고 하는 것과 다르다.

   ![ncs6](https://user-images.githubusercontent.com/54675591/117761008-949fbb00-b261-11eb-9763-2ae9ed8a78b2.PNG)

### 운영체제 핵심 기능

 운영체제는 중앙 처리 장치, 메모리, 스토리지, 주변 기기 등을 적절히 관리한다. 특히 주기억 장치와 메모리, 메모리와 스토리지 사이의 속도차로 인해 여러 가지 관리 기법들이 개발되었다. 초기에는 메모리 용량에 제한이 많아 소프트웨서 개발 시 메모리관리가 매우 중요했으나, 최근에 들어서는 운영체제에서 대부분 자동으로 관리해 주므로 사용이 편리해졌다. 또 개발 및 시스템 환경이 클라우드화 되면서 자원에 대한 관리 노력이 많이 줄었다.

1. 메모리 관리

   메모리 안에는 다수의 프로그램들이 실행된다. 프로그램 실행 주 메모리가 꽉 차게 되면 시스템의 속도가 느려지고 때로는 시스템이 멈추는 현상이 발생한다. 따라서 프로그램의 실행이 종료될 때까지 메모리를 가용한 상태로 유지 및 관리하는 것을 메모리관리라고 한다. 메모리에 있는 프로그램은 중앙 처리 장치인 CPU로 이동하여 처리된다. CPU는 Virtual or Logical Address를, 메모리는 Physical Address를 사용하는데 이를 매핑하는 것은 MMU(Memory Management Unit)가 담당한다.

   즉, CPU와 지속적으로 데이터를 송수신하는 상황에서 어떤 부분의 메모리가 현재 사용되는지, 어떤 순서로 메모리에 입출력되어야 하는지, 메모리 공간이 필요한 경우 어떻게 확보 및 제거할지에 대한 종합적인 관리가 메모리관리이다.

2. 프로세스 관리

   프로그램은 파일 형태로 저장하여 관리되다가 실행을 시키면 동작을 하게 된다. 이때 실행 중인 프로그램을 프로세스(Process)라고 한다. 프로세스관리 기법에는 **일시중지 및 재실행**, **동기화**, **통신**, **교착상태 처리**, **프로세스 생성 삭제**등이 있다. Windows에서는 작업관리자의 프로세스 탭에서 다양한 프로세스를 조회할 수 있고 프로그램이 정상 동작하지 않을 때 프로그램 끝내기를 통해 프로세스를 중단시킬 수도 있다

### 가상화, 클라우드

1. 가상화

   가상화는 물리적인 리소스들을 사용자에게 하나로 보이게 하거나, 반대로 하나의 물리적인 리소스를 여러 개로 보이게 하는 것을 의미한다. 대부분의 서버는 용량의 20% 정도만 사용하는데, 가상화는 서버의 가동률을 60~70% 이상으로 올릴 수 있다. 

   가상화를 통해 사용자는 하나의 PC에 여러 개의 운영체제를 설치하여 개발되는 프로그램을 다양한 환경에서 테스트할 수 있도록 하며, 서로 다른 운영체제에서만 구동되는 프로그램을 실행시키도록 지원하기도 한다. 가상화는 크게 플랫폼 가상화와 리소스 가상화로 구분될 수 있다. 플랫폼 가상화는 하드웨어 플랫폼 위에서 실행되는 호스트 프로그램이 게스트 프로그램을 만들어 마치 독립된 환경을 만들어 낸 것처럼 보여 주는 것이다. 게스트 소프트웨어 위에서 사용자는 독립된 하드웨어에서 소프트웨어가 실행되는 것처럼 활용할 수 있다.

   리소스 가상화는 메모리, 저장 장치, 네트워크 등을 결합하거나 나누는 것인데, 사용자는 가상화된 물리적 장치들이 어떤 위치에 있는지 모르는 경우가 많다.

2. 클라우드

   인터넷 기반에서 구동되는 컴퓨팅 기술을 의미한다. 클라우드 컴퓨팅을 이용하면 응용 프로그램을 필요에 따라 불러 사용하고, 데이터를 손쉽게 저장 및 추출할 수 있다. 태블릿, 휴대폰 등 사용 디바이스가 다양해지면서 클라우드 컴퓨팅은 중요도가 높아지고 있다. 클라우드 서비스는 IaaS, PaaS, Saas등으로 구분된다

   * IaaS(Infrastructure as a Service) : 웹상에서 구글, 마이크로소프트, 아마존 등에서 제공하는 환경의 네트워크, 보안 데이터 저장소, 콘텐츠 딜리버리 서비스를 포함한 다양한 인프라를 임대하여 이용할 수 있는 서비스
   * PaaS(Platform as as Service) : 운영체제가 이미 구성되어 있는 상태에서 사용자는 데이터와 애플리케이션만 직접 관리할 수 있는 서비스
   * SaaS(Software as a Service) : 인프라와 운영체제뿐만 아니라 사용할 수 있는 소프트웨어 까지 갖추어져 웹상의 로그인만으로 다양한 소프트웨어를 사용한 만큼 비용을 지불해가며 사용할 수 있는 서비스

### 데이터베이스 종류 및 선정

1. 데이터 베이스 종류

   * 파일시스템

     파일에 이름을 부여하고 저장이나 검색을 위하여 논리적으로 그것들을 어디에 위치시켜야 하는지 등을 정의한 뒤 관리하는 데이터베이스 전 단계의 데이터 관리 방식이다.

   * 계층형 데이터베이스 관리시스템(HDBMS: Hierarchical Database Management System)

     데이터를 상하 종속적인 관계로 계층화하여 관리하느 데이터베이스이다. 데이터에 대한 접근 속도가 빠르지만 종속적인 구조로 인하여 변화하는 데이터 구조에 유연하게 대응하기가 쉽지 않다.

   * 망형 데이터베이스 관리시스템(NDBMS : Network Database Management System)

      데이터의 구조를 네트워크상의 망상 형태로 논리적으로 표현한 데이터 모델이다. 트리구조나 계층형 데이터베이스보다는 유연하지만 설계가 복잡한 단점이 있다. IDS, TOTAL, IDMS와 같은 제품이 있다.

   * 관계형 데이터베이스 관리시스템(RDBMS : Relational Database Management System)

      가장 보편화된 데이터베이스 관리시스템이다. 데이터를 저장하는 테이블의 일부를 다른 테이블과 상하 관계로 표시하면 상관관계를 정리한다. 변화하는 업무나 데이터 구조에 대한 유연성이 좋아 유지 관리가 용이하다. Oracle, SQL Server, MySQL, Maria DB

2. 데이터베이스 관리시스템의 특징

   * **무결성**: 부적절한 자료가 입력되어 동일한 내용에 대하여 서로 다른 데이터가 저장되는 것을 허용하지 않는 성질
   * **일관성**: 삽입, 삭제, 갱신, 생성 후에도 저장된 데이터가 변함없이 일정해야함
   * **회복성**: 장애가 발생했을 시 특정 상태로 복구되어야 하는 성질
   * **보안성**: 불법적인 노출, 변경, 손실로부터 보호되어야 하는 성질
   * **효율성**: 응답 시간, 저장 공간 활용 등이 최적화되어 사용자, 소프트웨어, 시스템 등의 요구 조건을 만족 시켜야 하는 성질

### 관계형 데이터베이스 활용

1. ERD(E-R Diagram)

   1. ERD 개요

      ERD는 업무 분석 결과로 도출된 실체(Entity)와 엔티티 간의 관계를 도식화한 것이다. ERD로 요소들 간 연관성을 도식화하여 데이터베이스 관리자, 개발자, 사용자 모두 데이터의 흐름과 연고나성을 공통적으로 쉽게 확인할 수 있다.

   2. ER Model

      1. 엔티티 : 이름으로 넣는다.

      2. 속성(Attribute)

         ![ncs7](https://user-images.githubusercontent.com/54675591/117764246-252cca00-b267-11eb-88a8-5d5808f0b176.PNG)

      3. 관계(Relationship)

         ![ncs8](https://user-images.githubusercontent.com/54675591/117764362-51e0e180-b267-11eb-8a23-09cb8e330b81.PNG)

2.  ERD 작성

   1. ERD 최적화

      1. 테이블 정의

         업무나 시스템을 분석하여 엔티티, 속성을 추출한 뒤 테이블을 작성한다.

      2. 정규화 수행

         데이터베이스 정규화는 무결성을 확보하고, 중복성을 배제하여 테이블에 정확한 데이터가 들어가도록 하는 데 목적이 있다. 데이터의 중복성을 없애면 저장 공간을 최소화하고 시스템의 속도 또한 빠르게 할 수 있다. (1차 정규화, 2차 정규화, 3차 정규화)

      3. ERD 관계형 스키마 작성

3. 관계형 데이터베이스 테이블 생성

   ```sql
   CREATE TABLE Address(
   	Address1 varchar2(225),
       Address2 varchar2(255),
       Address3 varchar2(255),
       Postal_code varchar2(255),
       Client_ID varchar2(255)
   )
   ```

### CRUD

 CRUD는 데이터베이스가 가지는 기본적인 데이터 처리 기능인 Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 말한다.

* INSERT

  ```sql
  INSERT INT Address
  VALUES('서울특별시','성동구 23로', '개발아파트');
  ```

* SELECT

  ```sql
  SELECT *
    FROM Address;
    
  SELECT SEQ_ID,
  	   address1
    FROM Address;
  ```

* UPDATE

  ```sql
  UPDATE Address
     SET address1= '제주도', address2 = '서귀포시 색달동', address3 = '231호'
   WHERE SEQ_ID = 1;
  ```

* DELETE

  ```sql
  DELETE FROM ADdress
   WHERE Address1 = '서울특별시'
  ```

### 

### 네트워크 계층 구조 파악

 원하는 정보를 원하는 수신자 또는 기기에 정확하게 전송하기 위한 기반 인프라를 네트워크라고 한다. 정보 전달 시에는 약속한 규칙에 따라야 하는데 이를 프로토콜이라고 한다.

| **구분** | **개념**        | **설명**                                                     |
| -------- | --------------- | ------------------------------------------------------------ |
| WAN      | 광대역 네트워크 | * LAN에 비해 전송거리가 넓음, 라우팅 알고리즘이 필요함<br />* LAN 대비 에러율이 높고 전송 지연이 큼 |
| LAN      | 근거리 네트워크 | 한 건물 또는 작은 지역을 커버하는 네트워크임                 |

1. WAN(Wide Area Network)

   국가, 대륙과 같이 광범위한 지역을 연결하는 네트워크이다. 거리에 제약이 없으나 다양한 경로를 지나 정보가 전달되므로 LAN보다 속도가 느리고 에러율도 높다. 전용 회선 방식은 통신 사업자가 사전에 계약을 체결한 송싱자와 수신자끼리만 데이터를 교환하는 방식이며, 교환 회선 방식은 공중망을 활용하여 다수의 사용자가 선로를 공유하는 방식이다.

   1. 회선 교환 방식

      물리적 전용선을 활용하여 데이터 전달 경로가 정해진 후 동일 경로로만 전달이 된다. 데이터를 동시에 전송할 수 있는 양을 의미하는 대역폭이 고정되고 안정적인 전송률을 확보할 수 있다.

   2. 패킷 교환 방식

      패킷이라는 단위를 사용하여 데이터를 송신하고 수신한다. 패킷이란 정보를 일정한 크기로 분할한 뒤 각각의 패킷에 송수신 주소 및 부가 정보를 입력한 것이다. 현재 컴퓨터 네트워크에서 주로 사용하는 방식이다.

2. OSI 7계층

   | **계층** | **계층 이름**      | **설명**                                                     | **주요 장비 및 기술** |
   | -------- | ------------------ | ------------------------------------------------------------ | --------------------- |
   | 7        | Application Layer  | 사용자 친화 환경 제공(이메일, 웹 등)                         | 호스트(PC 등)         |
   | 6        | Presentation Layer | 코드 문자 등을 번역하여 일관되게 전송하고 압축, 해제, 보안 기능도 담당 | 호스트(PC 등)         |
   | 5        | Session Layer      | 송신, 수신 간의 논리적 연결                                  | 호스트(PC 등)         |
   | 4        | Transport Layer    | 송신, 수신 프로세스 간의 연결                                | TCP/IP UDP            |
   | 3        | Network Layer      | 다수의 중개 시스템 중 올바른 경로를 선택하도록 지원          | 라우터                |
   | 2        | Data Link Layer    | 오류와 흐름을 제거하여 신뢰성 있는 데이터를 전송             | 브리지, 스위치        |
   | 1        | Physical Layer     | 실제 장비들을 연결하기 위한 연결 장치                        | 허브, 리피터          |



3. 네트워크 주요 장비

   1. 허브, 리피터

      허브는 여러 대의 컴퓨터를 연결하기 네트워크로 보내거나 하나의 네트워크로 수신된 정보를 여러 대의 컴퓨터로 송신하기 위한 장비이다. 리피터는 디지털 신호를 증폭시켜 주는 역할을 하여 신호가 약해지지 않고 컴퓨터로 수신되도록 한다.

   2. 브리지, 스위치

      브리지와 스위치는 두 시스템을 연결하는 네트워킹 장치이며 두 개의 LAN을 연결하여 훨씬 더 큰 LAN을 만들어 준다. 스위치는 하드웨어 기반으로 처리하기 때문에 속도가 빠르며, 브리지는 소프트웨어 방식으로 처리하기 때문에 속도가 느리다. 브리지는 포트들이 같은 속도로 지원하는 반면, 스위치는 각기 다른 속도를 지원하도록 제어할 수 있다. 스위치는 제공하는 포트 수가 수십, 수백 개로 2-3개의 포트를 제공하는 브리지보다 많다. 브리지는 Store and Forwarding 전송 방식만을 사용하나. 스위치는 Out Through와 Fragment Free 방식을 같이 사용한다. 

      - Store and Forwarding : 데이터를 전부 받은 후 다음 처리를 하는 방식
      - Out Through : 데이터의 목적지 주소만 확인 후 바로 전송 처리하는 방식
      - Fragment Free : 위 두 방식의 장점을 결합한 방식

   3. 라우터

      라우터는 망 연동 장비이다. PC 등의 로컬 호스트가 LAN에 접근할 수 있도록 하며, WAN인터페이스를 사요하여 WAN에 접근하도록 한다. 라우팅 프로토콜은 경로 설정을 하여 원하는 목적지까지 지정된 데이터가 안전하게 전달되도록 한다.

### 네트워크 프로토콜

* TCP(Transmission Control Protocol)

  * CRC 체크와 재전송 기능을 통해 신뢰성 있는 전송을 확보한다.
  * Flow Control 기능을 수행하여 단계별 데이터 전송 상황을 체크한다.
  * 논리적인 1:1 가상 회선을 지원하여 해당 경로로만 데이터가 전달되도록 한다.
  * 대표 서비스 : FTP, Http, SMTP, POP, IMAP

* UDP(User Datagram Protocol)

  * 연결되어 있지않아도 데이터를 송신할 수 있다. 단, 수신 측의 수신 여부는 확인하기 어렵다.
  * Flow Control, Error Control을 하지 않아 신뢰성 있는 데이터 전송에는 부적합하다.
  * 하나의 송신 정보를 다수의 인원이 수신해야 할 경우 UDP를 사용한다.
  * 대표 서비스 : SNMP, DNS, TFTP, NFS, NETBIOS, 인터넷 게임/방송/증권

* TCP/UDP헤더 구조

  | **TCP/IP 헤더**                                              | UDP헤더                                           |
  | ------------------------------------------------------------ | ------------------------------------------------- |
  | 송/수신자 포트번호<br />순서 번호<br />응답 번호<br />데이터 오프셋<br />예약 필드<br />윈도 크기<br />Checksum<br />긴급 위치<br />제어 비트 | 송/수신자 포트번호<br />데이터 길이<br />Checksum |

### 네트워크 핵심 알고리즘

* 패킷 스위칭

  WAN을 통해 데이터를 원격지로 송부하기 위해 X.25, 프레임릴레이 및 ATM과 같은 다양한 기술들을 필요로 하게 되었다.

  * X.25

    전기 통시 국제기구인 ITU-T에서 관리 감독하는 프로토콜이다. X.25는 패킷이라고 불리는 데이터 블록을 사용하여 대용량의 데이터를 다수의 패킷으로 분리하여 송수신하며, 수신 측에서는 다수의 패킷을 결합하여 원래의 데이터로 복원한다. X.25는 OSI 7계층에서 1~3계층까지를 담당하고 있다. 현재는 프레임리레이나 ISDN, ATM 등 고속망으로 대체되었다.

  * 프레임릴레이

    프레임릴레이는 ISDN을 사용하기 위한 프로토콜로서 ITU-T에 의해 표준으로 작성되었다.

    *  X.25가 고정된 대역폭을 갖는 반면, 프레임릴레이는 사용자의 요청에 따라 유연한 대역 폭을 할당한다. 
    * 망의 성능 향상을 위해 에러 제어 기능과 흐름 제어 기능을 단순화시켰다.
    * X.25가 OSI 7계층 중 1~3계층까지를 담당하는 반면, 프레임릴레이는 1~2계층만을 담당 한다.
    * 전용선을 사용하는 것보다 가격이 저렴하며 기술적으로는 X.25에 비해 우위에 있다.

  * ATM(Asynchronous Transfer Mode)

    ATM은 비동기 전송모드라고 하는 광대역 전송에 쓰이는 스위칭 기법이다. 동기화를 맞추지 않아 보낼 데이터가 없는 사용자의 슬록은 다른 사람이 사용할 수 있도록 하여 네트워크상의 효율성을 높였다. ATM망은 연결형 회선이기 때문에 하나의 패킷을 보내 연결을 설정하게 되고 이후 실데이터 전송이 이루어진다. ATM은 OSI 7계층과는 다른 고유한 참조 모델을 가지고 있다.

* 서킷 스위칭

  패킷 스위칭과 달리 네트워크 리소스를 특정 사용층이 독점하도록 하는 것을 서킷 스위칭이라 부른다. 네트워크를 독점적으로 사용하기 때문에 전송이 보장(Guaranteed)된다는 특징이 있다. 서킷 스위칭은 서킷을 확보하기 위한 작업을 진행하고 실데이터를 전송하며 서킷을 닫는 프로세스로 진행된다. 이러한 작업이 일어나는 동안 다른 기기들은 해당 경로를 사용할 수 없다. 

![ncs9](https://user-images.githubusercontent.com/54675591/117777488-9c6a5a00-b277-11eb-84d7-41e33c5039a6.PNG)



* 라우팅 알고리즘

  데이터는 송신 측으로부터 수신 측까지 데이터를 전달하는 과정에서 다양한 물리적인 장치들을 거쳐 간다.  목적지까지의 최적 경로를 산출하기 위한 법칙이 라우팅 알고리즘이다.

  1. 거리 벡터 알고리즘(Distance Vector Algorithm)

     라우터와 라우터 간의 최단 경로 스패닝 트리를 찾고 그 최적 경로를 이용할 수 없을 경우에 다른 경로를 찾느다. 각 라우터가 업데이트될 경우마다 전체 라우팅 테이블을 보내라고 요청하지만 수신된 경로 비용 정보는 이웃 라우터에게만 보내진다. 링크 상태 라우팅 알고리즘보다 계산 면에서 단순하다.

  2. 링크 상태 알고리즘(Link state Algorithm)

     라우터와 라우터 간의 모든 경로를 파악한 뒤 대체 경로를 사전에 마련해 두는 방식이다. 링크 상태 알고리즘을 사용하면 네트워크를 일관성 있게 파악할 수 있으나 거리 벡터 알고리즘에 비하여 계산이 더 복잡하고 트래픽을 광범휘한 범위까지 전달해야 한다.

